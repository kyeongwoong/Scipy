Microsoft Windows [Version 10.0.16299.371]
(c) 2017 Microsoft Corporation. All rights reserved.

F:\Users\jh>h:

H:\>cd "파이썬 수치분석"

H:\파이썬 수치분석>cd src

H:\파이썬 수치분석\src>python
Python 3.6.4 |Anaconda, Inc.| (default, Jan 16 2018, 10:21:59) [MSC v.1900 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>>
>>> import numpy as np
>>>
>>>
>>> a = np.array([[1,2],[3,4]])
>>> b = 10
>>>
>>> a + b
array([[11, 12],
       [13, 14]])
>>> a * b
array([[10, 20],
       [30, 40]])
>>> a = np.array([1,2,3,4])
>>> b = np.array([1,2])
>>>
>>> a + b
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: operands could not be broadcast together with shapes (4,) (2,)
>>>
>>> x = np.arange(3)
>>> y = 5
>>> x+y
array([5, 6, 7])
>>> np.ones((3,3))
array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])
>>> a = np.ones((3,3))
>>> b = np.arange(3)
>>> a+b
array([[1., 2., 3.],
       [1., 2., 3.],
       [1., 2., 3.]])
>>> x = np.arange(3).reshape((3,1))
>>> x
array([[0],
       [1],
       [2]])
>>> y =np.array([1,2,3])
>>> y
array([1, 2, 3])
>>> x+y
array([[1, 2, 3],
       [2, 3, 4],
       [3, 4, 5]])
>>> array3d = np.array([[[0,1],[2,3],[4,5],[6,7]],
... [[8,9],[10,11],[12,13],[14,15]],
... [[16,17],[18,19],[20,21],[22,23]]])
>>> array3d
array([[[ 0,  1],
        [ 2,  3],
        [ 4,  5],
        [ 6,  7]],

       [[ 8,  9],
        [10, 11],
        [12, 13],
        [14, 15]],

       [[16, 17],
        [18, 19],
        [20, 21],
        [22, 23]]])
>>> array2d = np.array([[0,1],[2,3],[4,5],[6,7]])
>>> array2d
array([[0, 1],
       [2, 3],
       [4, 5],
       [6, 7]])
>>> array3d + array2d
array([[[ 0,  2],
        [ 4,  6],
        [ 8, 10],
        [12, 14]],

       [[ 8, 10],
        [12, 14],
        [16, 18],
        [20, 22]],

       [[16, 18],
        [20, 22],
        [24, 26],
        [28, 30]]])
>>> x = np.array([1,2,3])
>>> x
array([1, 2, 3])
>>> x.dtype
dtype('int32')
>>> x = np.array([1,2,3.0])
>>> x.dtype
dtype('float64')
>>> x = np.array([1,2,3], dtype="int")
>>> x.dtype
dtype('int32')
>>> y = np.array([1,2,3], dtype="float")
>>> y.dtype
dtype('float64')
>>> y = np.array([1,2,3], dtype="f")
>>> y
array([1., 2., 3.], dtype=float32)
>>> x = np.array([1,2,3], dtype="U")
>>> x.dtype
dtype('<U1')
>>> x[0]+x[1]
'12'
>>> np.array([0,1,-1,0] / np.array([1,0,0,0]
...
...
... )
...
...
...
... )
__main__:1: RuntimeWarning: divide by zero encountered in true_divide
__main__:1: RuntimeWarning: invalid value encountered in true_divide
array([  0.,  inf, -inf,  nan])
>>> np.array([0,1,-1,0])/np.array([1,0,0,0])
array([  0.,  inf, -inf,  nan])
>>> a1 = np.ones((2,3))
>>> a1
array([[1., 1., 1.],
       [1., 1., 1.]])
>>> a2 = np.zeros((2,2))
>>> a2
array([[0., 0.],
       [0., 0.]])
>>> np.hstack([a1,a2])
array([[1., 1., 1., 0., 0.],
       [1., 1., 1., 0., 0.]])
>>> b1 = np.ones((2,3))
>>> b1
array([[1., 1., 1.],
       [1., 1., 1.]])
>>> b2 = np.zeros((3,3))
>>> b2
array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])
>>> np.vstack([b1, b2])
array([[1., 1., 1.],
       [1., 1., 1.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])
>>> c1 = np.ones((3,4))
>>> c1
array([[1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.]])
>>> c2 = np.zeros((3,4))
>>> c2
array([[0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.]])
>>>
>>>
>>> np.dstack([c1,c2])
array([[[1., 0.],
        [1., 0.],
        [1., 0.],
        [1., 0.]],

       [[1., 0.],
        [1., 0.],
        [1., 0.],
        [1., 0.]],

       [[1., 0.],
        [1., 0.],
        [1., 0.],
        [1., 0.]]])
>>> (np.dstack([c1,c2])).shape
(3, 4, 2)
>>> c = np.stack([c1,c2])
>>> c
array([[[1., 1., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 1.]],

       [[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]]])
>>> c.shape
(2, 3, 4)
>>> b = np.arange(3)
>>> c = np.stack([c1, c2], axis = 0)
>>>
>>> c
array([[[1., 1., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 1.]],

       [[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]]])
>>> c = np.stack([c1, c2], axis = 1)
>>> c
array([[[1., 1., 1., 1.],
        [0., 0., 0., 0.]],

       [[1., 1., 1., 1.],
        [0., 0., 0., 0.]],

       [[1., 1., 1., 1.],
        [0., 0., 0., 0.]]])
>>> c.shape
(3, 2, 4)
>>> c = np.stack([c1,c2], axis = 2)
>>> c
array([[[1., 0.],
        [1., 0.],
        [1., 0.],
        [1., 0.]],

       [[1., 0.],
        [1., 0.],
        [1., 0.],
        [1., 0.]],

       [[1., 0.],
        [1., 0.],
        [1., 0.],
        [1., 0.]]])
>>> c.shape
(3, 4, 2)
>>> r = np.array([1,2,3])
>>> r1 = np.array([4,5,6])
>>> np.r_[r, r1]
array([1, 2, 3, 4, 5, 6])
>>> np.r_[r1, r]
array([4, 5, 6, 1, 2, 3])
>>> cc1 = np.array([1,2,3])
>>> cc2 = np.array([4,5,6])
>>>
>>> np.c_[cc1,cc2]
array([[1, 4],
       [2, 5],
       [3, 6]])
>>> t = np.array([[0,1,2],[11,22,33]])
>>> np.tile(t,2)
array([[ 0,  1,  2,  0,  1,  2],
       [11, 22, 33, 11, 22, 33]])
>>> np.tile(t,2)
array([[ 0,  1,  2,  0,  1,  2],
       [11, 22, 33, 11, 22, 33]])
>>>
>>> np.tile(t,(3,2))
array([[ 0,  1,  2,  0,  1,  2],
       [11, 22, 33, 11, 22, 33],
       [ 0,  1,  2,  0,  1,  2],
       [11, 22, 33, 11, 22, 33],
       [ 0,  1,  2,  0,  1,  2],
       [11, 22, 33, 11, 22, 33]])
>>>